<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TitleAppHeaderVersionInfo1" xml:space="preserve">
    <value>Next Design Extension Utility - Version {0}</value>
  </data>
  <data name="ErrorCommandExecutionFailed2" xml:space="preserve">
    <value>Failed to execute the command `{0} {1}`.</value>
  </data>
  <data name="ErrorHeader1" xml:space="preserve">
    <value>Error: {0}</value>
  </data>
  <data name="ErrorProjectFileNotFound0" xml:space="preserve">
    <value>The extension project file (csproj) could not be found.</value>
  </data>
  <data name="StatusPackagingProject3" xml:space="preserve">
    <value>==========&gt; Packaging Project &lt;=========================
[in] Target Project: {0}
[in] Build Target: {1}
[in] ND Version: {2} 
========================================================</value>
  </data>
  <data name="HeaderBuildProject0" xml:space="preserve">
    <value>Build Project</value>
  </data>
  <data name="HeaderPackaging0" xml:space="preserve">
    <value>Packaging</value>
  </data>
  <data name="ErrorNugetNotFound0" xml:space="preserve">
    <value>nuget.exe could not be found, so the packaging process could not be executed. Please download nuget.exe from https://www.nuget.org/downloads, save it in an appropriate folder, and add that folder to the PATH environment variable.</value>
  </data>
  <data name="HeaderCopyNupkg0" xml:space="preserve">
    <value>Copy nupkg</value>
  </data>
  <data name="HeaderDone0" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="LogPackagingCompleted0" xml:space="preserve">
    <value>Packaging has been completed.</value>
  </data>
  <data name="ErrorPackageIdNotSpecified0" xml:space="preserve">
    <value>Please specify the PackageId in the csproj file.</value>
  </data>
  <data name="ErrorAuthorsNotSpecified0" xml:space="preserve">
    <value>Please specify the Authors in the csproj file.</value>
  </data>
  <data name="ErrorVersionNotSpecified0" xml:space="preserve">
    <value>The package version is not specified in the csproj file. Please specify the Version.</value>
  </data>
  <data name="ErrorDescriptionNotSpecified0" xml:space="preserve">
    <value>Please specify the Description in the csproj file.</value>
  </data>
  <data name="DescriptionInstallCommand0" xml:space="preserve">
    <value>Installing the project template. Please run this command first.</value>
  </data>
  <data name="HeaderInstallingTemplates0" xml:space="preserve">
    <value>Installing the templates...</value>
  </data>
  <data name="LogInstallationCompleted0" xml:space="preserve">
    <value>Installation completed.
* You can create Next Design extensions using the `ndext new` or `ndext new-*` commands.
* You can also create extensions using the `dotnet new` command.</value>
  </data>
  <data name="DescriptionNewCommand0" xml:space="preserve">
    <value>Creates a new extension project for the latest version of Next Design in the current folder.</value>
  </data>
  <data name="DescriptionTemplateStandardExtension0" xml:space="preserve">
    <value>This is the standard extension for Next Design V4.0.</value>
  </data>
  <data name="DescriptionNewExtpCommand0" xml:space="preserve">
    <value>Creates a new extension project using the ExtensionPoints library for the latest version of Next Design in the current folder.</value>
  </data>
  <data name="DescriptionTemplateExtpStandardExtension0" xml:space="preserve">
    <value>This is an extension using the ExtensionPoints library for Next Design V4.0 (recommended).</value>
  </data>
  <data name="DescriptionNewCommandProjectName0" xml:space="preserve">
    <value>Please specify the project name to create.</value>
  </data>
  <data name="HeaderCreatingExtensionProjectDetails3" xml:space="preserve">
    <value>Creating Next Design Extension Solution &amp; Project

Project Name: '{0}'
Template Type: '{1}'
Template Description: '{2}'</value>
  </data>
  <data name="LogCompletion0" xml:space="preserve">
    <value>Completed.</value>
  </data>
  <data name="LogSolutionFileDetected1" xml:space="preserve">
    <value>Solution file `{0}` detected. Adding the project to this file.</value>
  </data>
  <data name="LogCreatingSolutionFile1" xml:space="preserve">
    <value>Creating solution file. {0}</value>
  </data>
  <data name="ErrorProjectFileAlreadyExists0" xml:space="preserve">
    <value>Project file already exists, aborting the process.</value>
  </data>
  <data name="ErrorProjectFileCreationFailed0" xml:space="preserve">
    <value>Failed to create the project file.</value>
  </data>
  <data name="LogProjectFileCreated2" xml:space="preserve">
    <value>Created `{1}` in {0}.</value>
  </data>
  <data name="DescriptionPackCommand0" xml:space="preserve">
    <value>Packages the extension.</value>
  </data>
  <data name="DescriptionPackCommandProjectDir0" xml:space="preserve">
    <value>Specifies the target project directory. If not specified, it searches and runs under the current directory.</value>
  </data>
  <data name="DescriptionPackCommandNDVersion1" xml:space="preserve">
    <value>Specifies the version of Next Design to target. If not specified, it defaults to `{0}`.</value>
  </data>
  <data name="DescriptionPackCommandBuildConfig1" xml:space="preserve">
    <value>Specifies the build configuration. Choose either `Debug` or `Release`. If not specified, it defaults to `{0}`.</value>
  </data>
  <data name="DescriptionPackCommandOutputDir1" xml:space="preserve">
    <value>Specifies the directory to store the created package. If not specified, it defaults to `{0}`.</value>
  </data>
  <data name="DescriptionPackCommandCopyDir0" xml:space="preserve">
    <value>Also copies the created package to the specified folder.</value>
  </data>
  <data name="StatusPackagingExtension0" xml:space="preserve">
    <value>Packaging the extension...</value>
  </data>
  <data name="DescriptionUninstallCommand0" xml:space="preserve">
    <value>Uninstalls the project template.</value>
  </data>
  <data name="HeaderTemplateUninstalling0" xml:space="preserve">
    <value>Uninstalling the template...</value>
  </data>
  <data name="DescriptionCreateExtensionUtility0" xml:space="preserve">
    <value>This is a utility for creating extensions for Next Design.</value>
  </data>
</root>